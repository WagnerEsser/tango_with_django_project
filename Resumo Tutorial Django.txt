>> Ir para 16.2

=============== INFORMAÇÕES GERAIS ===============

--Pasta do projeto (workspace):
	/home/tango_with_django_project

--Habilitar ambiente virtual (se existir):
	# source myvenv/bin/activate

--Habilitar servidor:
	# python manage.py runserver

--Criação de super usuário (habilita o acesso ao painel de administração do Django):
	# python manage.py createsuperuser


=============== GITHUB ===============

--Inicializar um repositório local:
	# git init
	# git config user.name "Your Name"
	# git config user.email you@example.com

--Para ignorar arquivos que não se quer enviar ao GIT, crie um arquivo: .gitignore
	- Como conteúdo coloque os arquivos que serão ignorados no commit

--Status do GitHub:
	# git status

--Adicinar arquivos ao próximo commit:
	# git add -A
	# git add --all

--Commit das mudanças:
	# git commit -m "mensagem de descrição dessa atualização"

--Empurrando o código para o GIT (1ª vez):
	# git remote add origin https://github.com/<your-github-username>/my-first-blog.git
	# git push -u origin master

--Puxar código do Git (1ª vez - em outro computador:
	# git clone https://github.com/<your-github-username>/my-first-blog.git

--Atualizar repositório remoto (enviar para o git):
	# git push

--Atualizar repositório atual (pegar do Git):
	# git pull

--Forçar # git pull
	# git fetch --all      // Busca os arquivos do Git, mas sem substituir os da máquina local ainda
	# git reset --hard origin/master     // Reseta os arquivos da máquina local para os arquivo do Git


=============== CRIAÇÃO DE UM MODELO ===============

1) Criar modelo no "models.py"
2) Adicionar novo modelo ao "admin.py"
3) # python manage.py makemigrations
4) # python manage.py migrate
5) Criar/Editar o "script população" para o seu novo modelo(s)
--OPÇÕES OPCIONAIS ---
6) Configurar um link em urls.py, caso tenha sido criado uma página para mostrar esse novo conteúdo


=============== APRESENTANDO CONTEÚDO ===============

--Defina uma URL no arquivo urls.py para que se possa acessar sua página na chamada do link
--Essa URL chamará uma view, então crie essa view no views.py, como exemplo: "def index(request):"
--Essa view renderizá sua página html, nela chama-se um template html, que estará em sua pasta "templates"
	- o RETURN da função, é passado 3 parâmetros, sendo eles:
		- REQUEST: e requisição
		- a localização do template (index.html)
		- um vetor passando todas os dados do banco de dados que será utilizada no index.html
--Então crie um template, "index.html" e utilize as variáveis (seguindo os nomes dos campos no models.py, exemplo: post.titulo)


=============== FORMULÁRIOS ===============

1) Criar um formulário em forms.py conforme o modelo do banco de dados
2) Criar em urls.py, exemplo:
	# url(r'^add_category/$', views.add_category, name='add_category'),
3) Como essa view mostrará o formulário de para inserir dados ou processará um formulário já requisitado (request.POST),
   logo deverá conter a verificação - if request.method == 'POST': - para ou gerar o formulário ou processar uma requisição
4) Por final criar a página que mostrará ó formulário, seguindo nosso exemplo: add_category.py


=============== BANCO DE DADOS ===============

--Criar base de dados do Django:
	# python manage.py migrate

--Preparar arquivo de atualização da base de dados, adicionando os novos modelos criados (models.py):
	# python manage.py makemigrations nome_do_app

--Implementar o arquivo de atualização no banco de dados:
	# python manage.py migrate nome_do_app
